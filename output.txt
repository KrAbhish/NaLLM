Attaching to api, ui
ui   | 
ui   | > nallm-ui@1.0.0 preview
ui   | > vite preview
ui   | 
ui   |   ➜  Local:   http://localhost:4173/
ui   |   ➜  Network: http://172.19.0.2:4173/
api  | 
api  |   This is the schema representation of the Neo4j database.
api  |   Node properties are the following:
api  |   [{'labels': '_Bloom_Scene_', 'properties': [{'property': 'ranges', 'type': 'STRING'}, {'property': 'gds', 'type': 'STRING'}, {'property': 'createdAt', 'type': 'INTEGER'}, {'property': 'lastModified', 'type': 'INTEGER'}, {'property': 'style', 'type': 'STRING'}, {'property': 'createdBy', 'type': 'STRING'}, {'property': 'visualisation', 'type': 'STRING'}, {'property': 'version', 'type': 'STRING'}, {'property': 'roles', 'type': 'LIST'}, {'property': 'numOfNodes', 'type': 'INTEGER'}, {'property': 'numOfRels', 'type': 'INTEGER'}, {'property': 'id', 'type': 'STRING'}, {'property': 'relationships', 'type': 'STRING'}, {'property': 'name', 'type': 'STRING'}, {'property': 'nodes', 'type': 'STRING'}]}, {'labels': '_Bloom_Perspective_', 'properties': [{'property': 'data', 'type': 'STRING'}, {'property': 'version', 'type': 'STRING'}, {'property': 'roles', 'type': 'LIST'}, {'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'Person', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}]}, {'labels': 'Organization', 'properties': [{'property': 'revenue', 'type': 'FLOAT'}, {'property': 'motto', 'type': 'STRING'}, {'property': 'name', 'type': 'STRING'}, {'property': 'isDissolved', 'type': 'BOOLEAN'}, {'property': 'id', 'type': 'STRING'}, {'property': 'nbrEmployees', 'type': 'INTEGER'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'isPublic', 'type': 'BOOLEAN'}]}, {'labels': 'IndustryCategory', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'City', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'Country', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}]}, {'labels': 'Article', 'properties': [{'property': 'id', 'type': 'STRING'}, {'property': 'sentiment', 'type': 'FLOAT'}, {'property': 'author', 'type': 'STRING'}, {'property': 'siteName', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'date', 'type': 'DATE_TIME'}, {'property': 'title', 'type': 'STRING'}]}, {'labels': 'Chunk', 'properties': [{'property': 'text', 'type': 'STRING'}, {'property': 'embedding', 'type': 'LIST'}, {'property': 'embedding_google', 'type': 'LIST'}]}, {'labels': 'Fewshot', 'properties': [{'property': 'Question', 'type': 'STRING'}, {'property': 'Cypher', 'type': 'STRING'}, {'property': 'id', 'type': 'INTEGER'}, {'property': 'embedding', 'type': 'LIST'}]}]
api  |   Relationship properties are the following:
api  |   []
api  |   The relationships are the following
api  |   ['(:_Bloom_Perspective_)-[:_Bloom_HAS_SCENE_]->(:_Bloom_Scene_)', '(:Person)-[:HAS_PARENT]->(:Person)', '(:Person)-[:HAS_CHILD]->(:Person)', '(:Organization)-[:IN_CITY]->(:City)', '(:Organization)-[:HAS_CATEGORY]->(:IndustryCategory)', '(:Organization)-[:HAS_SUBSIDIARY]->(:Organization)', '(:Organization)-[:HAS_SUPPLIER]->(:Organization)', '(:Organization)-[:HAS_BOARD_MEMBER]->(:Person)', '(:Organization)-[:HAS_CEO]->(:Person)', '(:Organization)-[:HAS_INVESTOR]->(:Organization)', '(:Organization)-[:HAS_COMPETITOR]->(:Organization)', '(:City)-[:IN_COUNTRY]->(:Country)', '(:Article)-[:HAS_CHUNK]->(:Chunk)', '(:Article)-[:MENTIONS]->(:Organization)']
api  |   
api  | INFO:     172.19.0.1:58320 - "GET /hasapikey HTTP/1.1" 200 OK
api  | [{'role': 'system', 'content': "\n        Your task is to come up with questions someone might as about the content of a Neo4j database. Try to make the questions as different as possible.\n        The questions should be separated by a new line and each line should only contain one question.\n        To do this, you need to understand the schema of the database. Therefore it's very important that you read the schema carefully. You can find the schema below.\n        Schema: \n        \n  This is the schema representation of the Neo4j database.\n  Node properties are the following:\n  [{'labels': '_Bloom_Scene_', 'properties': [{'property': 'ranges', 'type': 'STRING'}, {'property': 'gds', 'type': 'STRING'}, {'property': 'createdAt', 'type': 'INTEGER'}, {'property': 'lastModified', 'type': 'INTEGER'}, {'property': 'style', 'type': 'STRING'}, {'property': 'createdBy', 'type': 'STRING'}, {'property': 'visualisation', 'type': 'STRING'}, {'property': 'version', 'type': 'STRING'}, {'property': 'roles', 'type': 'LIST'}, {'property': 'numOfNodes', 'type': 'INTEGER'}, {'property': 'numOfRels', 'type': 'INTEGER'}, {'property': 'id', 'type': 'STRING'}, {'property': 'relationships', 'type': 'STRING'}, {'property': 'name', 'type': 'STRING'}, {'property': 'nodes', 'type': 'STRING'}]}, {'labels': '_Bloom_Perspective_', 'properties': [{'property': 'data', 'type': 'STRING'}, {'property': 'version', 'type': 'STRING'}, {'property': 'roles', 'type': 'LIST'}, {'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'Person', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}]}, {'labels': 'Organization', 'properties': [{'property': 'revenue', 'type': 'FLOAT'}, {'property': 'motto', 'type': 'STRING'}, {'property': 'name', 'type': 'STRING'}, {'property': 'isDissolved', 'type': 'BOOLEAN'}, {'property': 'id', 'type': 'STRING'}, {'property': 'nbrEmployees', 'type': 'INTEGER'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'isPublic', 'type': 'BOOLEAN'}]}, {'labels': 'IndustryCategory', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'City', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}]}, {'labels': 'Country', 'properties': [{'property': 'name', 'type': 'STRING'}, {'property': 'id', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}]}, {'labels': 'Article', 'properties': [{'property': 'id', 'type': 'STRING'}, {'property': 'sentiment', 'type': 'FLOAT'}, {'property': 'author', 'type': 'STRING'}, {'property': 'siteName', 'type': 'STRING'}, {'property': 'summary', 'type': 'STRING'}, {'property': 'date', 'type': 'DATE_TIME'}, {'property': 'title', 'type': 'STRING'}]}, {'labels': 'Chunk', 'properties': [{'property': 'text', 'type': 'STRING'}, {'property': 'embedding', 'type': 'LIST'}, {'property': 'embedding_google', 'type': 'LIST'}]}, {'labels': 'Fewshot', 'properties': [{'property': 'Question', 'type': 'STRING'}, {'property': 'Cypher', 'type': 'STRING'}, {'property': 'id', 'type': 'INTEGER'}, {'property': 'embedding', 'type': 'LIST'}]}]\n  Relationship properties are the following:\n  []\n  The relationships are the following\n  ['(:_Bloom_Perspective_)-[:_Bloom_HAS_SCENE_]->(:_Bloom_Scene_)', '(:Person)-[:HAS_PARENT]->(:Person)', '(:Person)-[:HAS_CHILD]->(:Person)', '(:Organization)-[:IN_CITY]->(:City)', '(:Organization)-[:HAS_CATEGORY]->(:IndustryCategory)', '(:Organization)-[:HAS_SUBSIDIARY]->(:Organization)', '(:Organization)-[:HAS_SUPPLIER]->(:Organization)', '(:Organization)-[:HAS_BOARD_MEMBER]->(:Person)', '(:Organization)-[:HAS_CEO]->(:Person)', '(:Organization)-[:HAS_INVESTOR]->(:Organization)', '(:Organization)-[:HAS_COMPETITOR]->(:Organization)', '(:City)-[:IN_COUNTRY]->(:Country)', '(:Article)-[:HAS_CHUNK]->(:Chunk)', '(:Article)-[:MENTIONS]->(:Organization)']\n  \n        "}, {'role': 'user', 'content': "Please generate 5 questions about the content of the database. Here is a sample of the database you can use when generating questions: [{'properties': {'summary': 'Software company based in Rome, Metropolitan City of Rome, Italy', 'isDissolved': False, 'id': 'E0ZU8eCc5OaqS1LU9qE3n3w', 'nbrEmployees': 375, 'name': 'New Energy Group', 'motto': '', 'isPublic': False, 'revenue': 120000000.0}, 'labels': ['Organization']}, {'properties': {'summary': 'Software company based in Chicago, Illinois, United States', 'isDissolved': True, 'id': 'Ep4YdYe6nPdaQnvOFxKB_qQ', 'nbrEmployees': 375, 'name': 'Clarity Insights', 'motto': '', 'isPublic': False}, 'labels': ['Organization']}, {'properties': {'summary': 'Software company based in Sydney, New South Wales, Australia', 'isDissolved': True, 'id': 'EyQvESab5O3aLu1zpcfgs1w', 'nbrEmployees': 175, 'name': 'Icon Integration', 'motto': 'Supply Chain Management & Advanced Data Analytics.', 'isPublic': False}, 'labels': ['Organization']}, {'properties': {'summary': 'Organization based in Shanghai, Shanghai Municipality, China', 'isDissolved': False, 'id': 'EmgfQlHEXOxezLoWpMVikgQ', 'nbrEmployees': 50, 'name': 'HO Communication', 'motto': '', 'isPublic': False, 'revenue': 7700000.0}, 'labels': ['Organization']}, {'properties': {'summary': 'Software company based in Philadelphia, Pennsylvania, United States', 'isDissolved': False, 'id': 'EUDT9pu9yNB2U_4LAjCNHgQ', 'nbrEmployees': 12, 'name': 'Knowledge Rules', 'motto': '', 'isPublic': False, 'revenue': 4300000.0}, 'labels': ['Organization']}]"}]
api  | openai.__version__ 1.42.0
api  | INFO:     172.19.0.1:58320 - "POST /questionProposalsForCurrentDb HTTP/1.1" 200 OK
api  | [{'role': 'user', 'content': 'Which organizations are based in Rome, Metropolitan City of Rome, Italy?'}, {'role': 'user', 'content': 'Question to be converted to Cypher: Which organizations are based in Rome, Metropolitan City of Rome, Italy?'}]
api  | openai.__version__ 1.42.0
api  | Generated cypher: 
api  | MATCH (o:Organization)-[:IN_CITY]-(c:City {name:"Rome", summary:"Metropolitan City of Rome, Italy"})
api  | RETURN o.name
api  | 
api  | results {'output': [], 'generated_cypher': '\nMATCH (o:Organization)-[:IN_CITY]-(c:City {name:"Rome", summary:"Metropolitan City of Rome, Italy"})\nRETURN o.name\n'}
api  | openai.__version__ 1.42.0
